rse_mnus <- -sqrt(deviance(fm)/df.residual(fm)) *2
rse_plus <- sqrt(sum(residuals(fit)^2) / df.residual(fit)) *2
rse_plis
rse_plus
rse_mnus <- -sqrt(sum(residuals(fit)^2) / df.residual(fit)) *2p
rse_minus <- -sqrt(sum(residuals(fit)^2) / df.residual(fit)) *2
rse_minus
model <- mpg ~ weight
fit <-  lm(model, Auto)
rse_plus <- sqrt(sum(residuals(fit)^2) / df.residual(fit)) *2
rse_minus <- -sqrt(sum(residuals(fit)^2) / df.residual(fit)) *2
ggplot(fit, aes(x= fit$fitted.values, y = fit$residuals)) +
geom_point() +
geom_hline(yintercept=0, color = "black")
model <- mpg ~ weight
fit <-  lm(model, Auto)
rse_plus <- sqrt(sum(residuals(fit)^2) / df.residual(fit)) *2
rse_minus <- -sqrt(sum(residuals(fit)^2) / df.residual(fit)) *2
ggplot(fit, aes(x= fit$fitted.values, y = fit$residuals)) +
geom_point(color = "blue") +
geom_hline(yintercept=0, color = "black")
model <- mpg ~ weight
fit <-  lm(model, Auto)
rse_plus <- sqrt(sum(residuals(fit)^2) / df.residual(fit)) *2
rse_minus <- -sqrt(sum(residuals(fit)^2) / df.residual(fit)) *2
ggplot(fit, aes(x= fit$fitted.values, y = fit$residuals)) +
geom_point(color = "blue") +
geom_hline(yintercept=0, color = "black") +
geom_hline(yintercept=rse_plus, color = "yellow") +
geom_hline(yintercept=rse_minus, color = "yellow")
model <- mpg ~ weight
fit <-  lm(model, Auto)
rse_plus <- sqrt(sum(residuals(fit)^2) / df.residual(fit)) *2
rse_minus <- -sqrt(sum(residuals(fit)^2) / df.residual(fit)) *2
ggplot(fit, aes(x= fit$fitted.values, y = fit$residuals)) +
geom_point(color = "blue") +
geom_hline(yintercept=0, color = "black") +
geom_hline(yintercept=rse_plus, color = "yellow") +
geom_hline(yintercept=rse_minus, color = "yellow") +
theme_classic()+
labs(
x ="Predicted mpg Value", y = "Residuals", title = paste(
" Residual Scatter Plot for Simple Linear Fit: mpg ~ weight"
) )
model <- mpg ~ weight
fit <-  lm(model, Auto)
rse_plus <- sqrt(sum(residuals(fit)^2) / df.residual(fit)) *2
rse_minus <- -sqrt(sum(residuals(fit)^2) / df.residual(fit)) *2
ggplot(fit, aes(x= fit$fitted.values, y = fit$residuals)) +
geom_point(color = "blue") +
geom_hline(yintercept=0, color = "black") +
geom_hline(yintercept=rse_plus, color = "yellow") +
geom_hline(yintercept=rse_minus, color = "yellow") +
theme_bw()+
labs(
x ="Predicted mpg Value", y = "Residuals", title = paste(
" Residual Scatter Plot for Simple Linear Fit: mpg ~ weight"
) )
model <- mpg ~ weight
fit <-  lm(model, Auto)
rse_plus <- sqrt(sum(residuals(fit)^2) / df.residual(fit)) *2
rse_minus <- -sqrt(sum(residuals(fit)^2) / df.residual(fit)) *2
ggplot(fit, aes(x= fit$fitted.values, y = fit$residuals)) +
geom_point(color = "blue") +
geom_hline(yintercept=0, color = "black") +
geom_hline(yintercept=rse_plus, color = "orange") +
geom_hline(yintercept=rse_minus, color = "orange") +
theme_bw()+
labs(
x ="Predicted mpg Value", y = "Residuals", title = paste(
" Residual Scatter Plot for Simple Linear Fit: mpg ~ weight"
) )
model <- mpg ~ weight+ weight^2
fit <-  lm(model, Auto)
rse_plus <- sqrt(sum(residuals(fit)^2) / df.residual(fit)) *2
rse_minus <- -sqrt(sum(residuals(fit)^2) / df.residual(fit)) *2
ggplot(fit, aes(x= fit$fitted.values, y = fit$residuals)) +
geom_point(color = "blue") +
geom_hline(yintercept=0, color = "black") +
geom_hline(yintercept=rse_plus, color = "orange") +
geom_hline(yintercept=rse_minus, color = "orange") +
theme_bw()+
labs(
x ="Predicted mpg Value", y = "Residuals", title = paste(
" Residual Scatter Plot for Simple Linear Fit: mpg ~ weight"
) )
model <- mpg ~ weight+ weight^2
fit <-  lm(model, Auto)
fit
model <- mpg ~ poly(weight,2)
fit <-  lm(model, Auto)
fit
model <- mpg ~ poly(weight,2)
fit <-  lm(model, Auto)
rse_plus <- sqrt(sum(residuals(fit)^2) / df.residual(fit)) *2
rse_minus <- -sqrt(sum(residuals(fit)^2) / df.residual(fit)) *2
ggplot(fit, aes(x= fit$fitted.values, y = fit$residuals)) +
geom_point(color = "blue") +
geom_hline(yintercept=0, color = "black") +
geom_hline(yintercept=rse_plus, color = "orange") +
geom_hline(yintercept=rse_minus, color = "orange") +
theme_bw()+
labs(
x ="Predicted mpg Value", y = "Residuals", title = paste(
" Residual Scatter Plot for Simple Linear Fit: mpg ~ weight"
) )
anova_two_way <- aov(Sales ~ CompPrice + Income + Advertising , data = Carseats)
summary(anova_two_way)
anova_two_way <- aov(Balance ~ Cards + Student, data = Credit)
summary(anova_two_way)
ggplot(Carseats, aes(x = Income, y = Sales))+
geom_point(aes(color= ShelveLoc), size =0.5) +
stat_smooth(method='lm',
formula = y~x:ShelveLoc,
se = TRUE,
aes(color= income)) + theme_classic()
View(Carseats)
ggplot(Carseats, aes(x = Income, y = Sales))+
geom_point(aes(color= ShelveLoc), size =0.5) +
stat_smooth(method='lm',
formula = y~x:ShelveLoc,
se = TRUE,
aes(color= Income)) + theme_classic()
ggplot(Carseats, aes(x = Income, y = Sales))+
geom_point(aes(color= ShelveLoc), size =0.5) +
stat_smooth(method='lm',
se = TRUE,
aes(color= Income)) + theme_classic()
ggplot(Carseats, aes(x = Income, y = Sales, group = ShelveLoc))+
geom_point(aes(color= ShelveLoc), size =0.5) +
stat_smooth(method='lm',
se = TRUE,
aes(color= Income)) + theme_classic()
ggplot(Carseats, aes(x = Income, y = Sales, group = ShelveLoc, color= ShelveLoc))+
geom_point() +
stat_smooth(method='lm',
se = FALSE,
aes(color= Income)) + theme_classic()
ggplot(Carseats, aes(x = Income, y = Sales, group = ShelveLoc, color= ShelveLoc))+
geom_point(size =0.5) +
stat_smooth(method='lm',
se = TRUE,
aes(color= Income)) + theme_classic()
ggplot(Carseats, aes(x = Income, y = Sales, group = ShelveLoc, color= ShelveLoc))+
geom_point(size =0.5) +
stat_smooth(method='lm',
se = FALSE,
aes(color= Income)) + theme_classic()
ggplot(Carseats, aes(x = Income, y = Sales, group = ShelveLoc, color= ShelveLoc))+
geom_point(size =0.5) +
stat_smooth(method='lm',
se = FALSE,
aes(color= ShelveLoc)) + theme_classic()
ggplot(Carseats, aes(x = Income, y = Sales, group = ShelveLoc, color= ShelveLoc))+
geom_point(size =0.5) +
stat_smooth(method='lm',
se = FALSE,
aes(color= ShelveLoc)) + theme_br()
ggplot(Carseats, aes(x = Income, y = Sales, group = ShelveLoc, color= ShelveLoc))+
geom_point(size =0.5) +
stat_smooth(method='lm',
se = FALSE,
aes(color= ShelveLoc)) + theme_bw()
ggplot(Carseats, aes(x = Income, y = Sales, group = ShelveLoc, color= ShelveLoc))+
geom_point(size =0.5) +
stat_smooth(method='lm',
se = FALSE,
aes(color= ShelveLoc)) + theme_bw() +
labs(
x ="Income", y = "Sales", title = paste(
"Sales ~ Income + ShelveLoc + Income:ShelveLoc with Estimated Regression Lines"
) )
Advertising
library(olsrr)
View(Credit)
Credit[-1]
library(olsrr)
model <- Balance ~.
fit <- lm(model, Credit[-1])
ols_stepwise(fit, details = TRUE)
library(olsrr)
model <- Balance ~.
fit <- lm(model, Credit[-1])
ols_step_both_p(fit, details = TRUE)
library(olsrr)
model <- Balance ~.
fit <- lm(model, Credit[-1])
ols_step_both_p(fit, details = FALSE)
library(olsrr)
model <- Balance ~.
fit <- lm(model, Credit[-1])
fit_f <- ols_step_both_p(fit, details = FALSE)
View(fit_f)
View(fit_f)
library(olsrr)
model <- Balance ~.
fit <- lm(model, Credit[-1])
fit_f <- ols_step_both_p(fit, details = FALSE)
model <- Balance ~Rating + Income+ StudentYes+Limit+Cards+Age
fit <- lm(model, Credit[-1])
library(olsrr)
model <- Balance ~.
fit <- lm(model, Credit[-1])
fit_f <- ols_step_both_p(fit, details = FALSE)
model <- Balance ~Rating + Income+ Student+Limit+Cards+Age
fit <- lm(model, Credit[-1])
summary(fit)
View(fit)
fit$fitted.values,
fit$fitted.values
fit$fitted.values[1, 1]
Credit$pred <- predict(fit)
View(Credit)
library(olsrr)
model <- Balance ~.
fit <- lm(model, Credit[-1])
fit_f <- ols_step_both_p(fit, details = FALSE)
model <- Balance ~Rating + Income+ Student+Limit+Cards+Age
fit <- lm(model, Credit[-1])
summary(fit)
Credit$pred <- predict(fit)
ggplot(Credit, aes(x= Balance, y = pred)) +
geom_point(color = "blue") +
theme_bw()+
labs(
x ="Predicted mpg Value", y = "Residuals", title = paste(
" Residual Scatter Plot for Simple Linear Fit: mpg ~ weight"
) )
library(olsrr)
model <- Balance ~.
fit <- lm(model, Credit[-1])
fit_f <- ols_step_both_p(fit, details = FALSE)
model <- Balance ~Rating + Income+ Student+Limit+Cards+Age
fit <- lm(model, Credit[-1])
summary(fit)
Credit$pred <- predict(fit)
ggplot(Credit, aes(x= Balance, y = pred)) +
geom_point(color = "blue") +
stat_smooth(method='lm',
se = FALSE,
aes()) +
labs(
x ="Actual Balance Value", y = "Predicted balance Value", title = paste(
"Predicted Balance vs Actual"
) )
library(olsrr)
model <- Balance ~.
fit <- lm(model, Credit[-1])
fit_f <- ols_step_both_p(fit, details = FALSE)
model <- Balance ~Rating + Income+ Student+Limit+Cards+Age
fit <- lm(model, Credit[-1])
summary(fit)
Credit$pred <- predict(fit)
ggplot(Credit, aes(x= Balance, y = pred)) +
geom_point(color = "#006EA1") +
stat_smooth(method='lm',
se = FALSE,
aes()) +
labs(
x ="Actual Balance Value", y = "Predicted balance Value", title = paste(
"Predicted Balance vs Actual"
) )
library(olsrr)
model <- Balance ~.
fit <- lm(model, Credit[-1])
fit_f <- ols_step_both_p(fit, details = FALSE)
model <- Balance ~Rating + Income+ Student+Limit+Cards+Age
fit <- lm(model, Credit[-1])
summary(fit)
Credit$pred <- predict(fit)
ggplot(Credit, aes(x= Balance, y = pred)) +
geom_point(color = "#006EA1") +
stat_smooth(method='lm',
se = FALSE,
aes(color = "yellow")) +
labs(
x ="Actual Balance Value", y = "Predicted balance Value", title = paste(
"Predicted Balance vs Actual"
) )
library(olsrr)
model <- Balance ~.
fit <- lm(model, Credit[-1])
fit_f <- ols_step_both_p(fit, details = FALSE)
model <- Balance ~Rating + Income+ Student+Limit+Cards+Age
fit <- lm(model, Credit[-1])
summary(fit)
Credit$pred <- predict(fit)
ggplot(Credit, aes(x= Balance, y = pred)) +
geom_point(color = "#006EA1") +
stat_smooth(method='lm',
se = FALSE,
aes()) +
labs(
x ="Actual Balance Value", y = "Predicted balance Value", title = paste(
"Predicted Balance vs Actual"
) )
library(olsrr)
model <- Balance ~.
fit <- lm(model, Credit[-1])
fit_f <- ols_step_both_p(fit, details = FALSE)
model <- Balance ~Rating + Income+ Student+Limit+Cards+Age
fit <- lm(model, Credit[-1])
summary(fit)
Credit$pred <- predict(fit)
ggplot(Credit, aes(x= Balance, y = pred)) +
geom_point(color = "#006EA1") +
stat_smooth(method='lm',
se = FALSE,
aes(color= "yellow")) +
labs(
x ="Actual Balance Value", y = "Predicted balance Value", title = paste(
"Predicted Balance vs Actual"
) )
library(olsrr)
model <- Balance ~.
fit <- lm(model, Credit[-1])
fit_f <- ols_step_both_p(fit, details = FALSE)
model <- Balance ~Rating + Income+ Student+Limit+Cards+Age
fit <- lm(model, Credit[-1])
summary(fit)
Credit$pred <- predict(fit)
ggplot(Credit, aes(x= Balance, y = pred)) +
geom_point(color = "#006EA1") +
stat_smooth(method='lm',
se = FALSE,
aes(color= "orange")) +
labs(
x ="Actual Balance Value", y = "Predicted balance Value", title = paste(
"Predicted Balance vs Actual"
) )
library(olsrr)
model <- Balance ~.
fit <- lm(model, Credit[-1])
fit_f <- ols_step_both_p(fit, details = FALSE)
model <- Balance ~Rating + Income+ Student+Limit+Cards+Age
fit <- lm(model, Credit[-1])
summary(fit)
Credit$pred <- predict(fit)
ggplot(Credit, aes(x= Balance, y = pred)) +
geom_point(color = "#006EA1") +
stat_smooth(method='lm',fill = "orange"
se = FALSE,
library(olsrr)
model <- Balance ~.
fit <- lm(model, Credit[-1])
fit_f <- ols_step_both_p(fit, details = FALSE)
model <- Balance ~Rating + Income+ Student+Limit+Cards+Age
fit <- lm(model, Credit[-1])
summary(fit)
Credit$pred <- predict(fit)
ggplot(Credit, aes(x= Balance, y = pred)) +
geom_point(color = "#006EA1") +
stat_smooth(method='lm',fill = "orange",
se = FALSE,
aes()) +
labs(
x ="Actual Balance Value", y = "Predicted balance Value", title = paste(
"Predicted Balance vs Actual"
) )
library(olsrr)
model <- Balance ~.
fit <- lm(model, Credit[-1])
fit_f <- ols_step_both_p(fit, details = FALSE)
model <- Balance ~Rating + Income+ Student+Limit+Cards+Age
fit <- lm(model, Credit[-1])
summary(fit)
Credit$pred <- predict(fit)
ggplot(Credit, aes(x= Balance, y = pred)) +
geom_point(color = "#006EA1") +
stat_smooth(method='lm',colour = "orange",
se = FALSE,
aes()) +
labs(
x ="Actual Balance Value", y = "Predicted balance Value", title = paste(
"Predicted Balance vs Actual"
) )
ggplt(fit, aes(residuals)) +
geom_histogram(aes(y = stat(density))) +
stat_function(
fun = dnorm,
args = list(mean = mean(residuals), sd = sd(residuals)),
lwd = 2,
col = 'red'
)
ggplot(fit, aes(residuals)) +
geom_histogram(aes(y = stat(density))) +
stat_function(
fun = dnorm,
args = list(mean = mean(residuals), sd = sd(residuals)),
lwd = 2,
col = 'red'
)
fit$residuals
ggplot(fit, aes(x = fit$residuals)) +
geom_histogram(aes(y = stat(density))) +
stat_function(
fun = dnorm,
args = list(mean = mean(residuals), sd = sd(residuals)),
lwd = 2,
col = 'red'
)
ggplot(fit, aes(x = fit$residuals)) +
geom_histogram(aes(y = stat(density))) +
stat_function(
fun = dnorm,
args = list(mean = mean(fit$residuals), sd = sd(fit$residuals)),
lwd = 2,
col = 'red'
)
ggplot(fit, aes(x = fit$residuals)) +
geom_histogram(aes(y = stat(density, color  =  "#006EA1"))) +
stat_function(
fun = dnorm,
args = list(mean = mean(fit$residuals), sd = sd(fit$residuals)),
lwd = 2,
col = 'orange'
)
ggplot(fit, aes(x = fit$residuals, fill  =  "#006EA1")) +
geom_histogram(aes(y = stat(density))) +
stat_function(
fun = dnorm,
args = list(mean = mean(fit$residuals), sd = sd(fit$residuals)),
lwd = 2,
col = 'orange'
)
ggplot(fit, aes(x = fit$residuals, color  =  "#006EA1")) +
geom_histogram(aes(y = stat(density))) +
stat_function(
fun = dnorm,
args = list(mean = mean(fit$residuals), sd = sd(fit$residuals)),
lwd = 2,
col = 'orange'
)
ggplot(fit, aes(x = fit$residuals )) +
geom_histogram(aes(y = stat(density), color  =  "#006EA1")) +
stat_function(
fun = dnorm,
args = list(mean = mean(fit$residuals), sd = sd(fit$residuals)),
lwd = 2,
col = 'orange'
)
ggplot(fit, aes(x = fit$residuals )) +
geom_histogram(aes(y = stat(density), color = "#006EA1") +
stat_function(
fun = dnorm,
args = list(mean = mean(fit$residuals), sd = sd(fit$residuals)),
lwd = 2,
col = 'orange'
)
ggplot(fit, aes(x = fit$residuals )) +
geom_histogram(aes(y = stat(density), color = "#006EA1")) +
stat_function(
fun = dnorm,
args = list(mean = mean(fit$residuals), sd = sd(fit$residuals)),
lwd = 2,
col = 'orange'
)
ggplot(fit, aes(x = fit$residuals )) +
geom_histogram(aes(y = stat(density), color = "#006EA1")) +
stat_function(
fun = dnorm,
args = list(mean = mean(fit$residuals), sd = sd(fit$residuals)),
lwd = 2,
col = 'orange'
)
ggplot(fit, aes(x = fit$residuals )) +
geom_histogram(aes(y = stat(density), fill = "#006EA1")) +
stat_function(
fun = dnorm,
args = list(mean = mean(fit$residuals), sd = sd(fit$residuals)),
lwd = 2,
col = 'orange'
)
ggplot(fit, aes(x = fit$residuals )) +
geom_histogram(aes(y = stat(density)),fill = "#006EA1") +
stat_function(
fun = dnorm,
args = list(mean = mean(fit$residuals), sd = sd(fit$residuals)),
lwd = 2,
col = 'orange'
)
ggplot(fit, aes(x = fit$residuals )) +
geom_histogram(aes(y = stat(density)),fill = "#006EA1") +
stat_function(
fun = dnorm,
args = list(mean = mean(fit$residuals), sd = sd(fit$residuals)),
lwd = 2,
col = 'orange'
) +
labs(
x ="Proportion of Observations", y = "Predicted balance Value", title = paste(
"Density Histogram of Residuals with Normal Distribution"
) )
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::update_meta_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::new_post_addin()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
